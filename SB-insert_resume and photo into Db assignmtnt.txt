step - 1 entity class
=====================

@Entity
@Table(name = "person")
public class Person {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	private String name;
	@Lob
	private byte[] resume;
	@Lob
	private byte[] photo;
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public byte[] getResume() {
		return resume;
	}
	public void setResume(byte[] resume) {
		this.resume = resume;
	}
	public byte[] getPhoto() {
		return photo;
	}
	public void setPhoto(byte[] photo) {
		this.photo = photo;
	}

}

=================================================================================
step - 2 : person repo
=======================


public interface personRepo extends JpaRepository<Person, Integer>{

}


=================================================================================

step - 3 : service class
=========================  


@Service
public class PersonService {
	
	@Autowired
	private personRepo pr;
	
	public void savePerson() {
		Person p=new Person();
		p.setName("sai");
		String resumePath="D:/Sai Resume.pdf";
		String photoPath="D:/saiPhoto1.jpg";

		try {
			Path resPath = Path.of(resumePath);
			byte[] resumeData = Files.readAllBytes(resPath);
			
			p.setResume(resumeData);
			
			Path phtPath = Path.of(photoPath);
			byte[] photoData = Files.readAllBytes(phtPath);
			
			p.setPhoto(photoData);
			
		}catch (Exception e) {
           e.printStackTrace();
		}
	      pr.save(p);
		
	}

}


=================================================================================

step - 4 : start class
=========================

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		ConfigurableApplicationContext contxt =
				SpringApplication.run(Application.class, args);
		PersonService pSerObj = contxt.getBean(PersonService.class);
		pSerObj.savePerson();

	}

	

}
  

=================================================================================

step - 5 : Properties file
=========================

spring.datasource.username = xxxxxxx
spring.datasource.password = xxxxxxxx
spring.datasource.url=jdbc:mysql://localhost:3306/xxxxx

#spring.jpa.hibernate.ddl-auto=update
(
=> remove # symbol and run the code only for one time ,after this u will get data too long error msg.
=> after running first time go to mysql work bench and execute these queries 
     
     describe  person;
     alter table person modify column resume blob;
     commit;

=> comment it by using # symbol and run the code 

)
spring.jpa.show-sql=true













































